/*
 * Opalstack API
 *
 *  ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ```
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

type PsqlCharset string

// List of PsqlCharset
const (
	UTF8_PsqlCharset         PsqlCharset = "utf8"
	EUC_CN_PsqlCharset       PsqlCharset = "euc_cn"
	EUC_JIS_2004_PsqlCharset PsqlCharset = "euc_jis_2004"
	EUC_JP_PsqlCharset       PsqlCharset = "euc_jp"
	EUC_KR_PsqlCharset       PsqlCharset = "euc_kr"
	EUC_TW_PsqlCharset       PsqlCharset = "euc_tw"
	ISO_8859_5_PsqlCharset   PsqlCharset = "iso_8859_5"
	ISO_8859_6_PsqlCharset   PsqlCharset = "iso_8859_6"
	ISO_8859_7_PsqlCharset   PsqlCharset = "iso_8859_7"
	ISO_8859_8_PsqlCharset   PsqlCharset = "iso_8859_8"
	KOI8R_PsqlCharset        PsqlCharset = "koi8r"
	KOI8U_PsqlCharset        PsqlCharset = "koi8u"
	LATIN1_PsqlCharset       PsqlCharset = "latin1"
	LATIN2_PsqlCharset       PsqlCharset = "latin2"
	LATIN3_PsqlCharset       PsqlCharset = "latin3"
	LATIN4_PsqlCharset       PsqlCharset = "latin4"
	LATIN5_PsqlCharset       PsqlCharset = "latin5"
	LATIN6_PsqlCharset       PsqlCharset = "latin6"
	LATIN7_PsqlCharset       PsqlCharset = "latin7"
	LATIN8_PsqlCharset       PsqlCharset = "latin8"
	LATIN9_PsqlCharset       PsqlCharset = "latin9"
	LATIN10_PsqlCharset      PsqlCharset = "latin10"
	SQL_ASCII_PsqlCharset    PsqlCharset = "sql_ascii"
	WIN866_PsqlCharset       PsqlCharset = "win866"
	WIN874_PsqlCharset       PsqlCharset = "win874"
	WIN1250_PsqlCharset      PsqlCharset = "win1250"
	WIN1251_PsqlCharset      PsqlCharset = "win1251"
	WIN1252_PsqlCharset      PsqlCharset = "win1252"
	WIN1253_PsqlCharset      PsqlCharset = "win1253"
	WIN1254_PsqlCharset      PsqlCharset = "win1254"
	WIN1255_PsqlCharset      PsqlCharset = "win1255"
	WIN1256_PsqlCharset      PsqlCharset = "win1256"
	WIN1257_PsqlCharset      PsqlCharset = "win1257"
	WIN1258_PsqlCharset      PsqlCharset = "win1258"
)
